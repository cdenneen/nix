#█▓▒░ fake x hax
#export DISPLAY=:0
(&>/dev/null ~/.local/bin/exorg &)

#█▓▒░ ssh & gpg keychain init
# eval $(keychain --dir "$XDG_RUNTIME_DIR"\
# 	--absolute -q --agents gpg \
# 	--eval ~/.ssh/id_ed25519 0x3834814930B83A30 0xBFEB75D960DFAA6B)

#█▓▒░ 1password
if [ -n "$(op account list)" ]; then
	echo "unlock your keychain 󱕵"
	read -rs _pw
	if [ -n "$_pw" ]; then
		printf "logging in: "
		accounts=("${(f)$(op account list | tail -n +2 | sed 's/ .*//')}")
		for acct in "${accounts[@]}" ;do
			printf "%s " "$acct"
			eval $(echo "$_pw" | op signin --account "$acct")
		done
		echo
	fi
fi

update_secrets() {
  local secrets_file="$HOME/.secrets"

  {
    echo "export AZURE_DEFAULT_USERNAME=\"$(op read 'op://private/office 365/username')\""
    echo "export AZURE_DEFAULT_PASSWORD=\"$(op read 'op://private/office 365/password')\""
    echo "export GITLAB_TOKEN=\"$(op read 'op://private/gitlab personal access token/token')\""
    echo "export TF_HTTP_PASSWORD=\"$(op read 'op://private/gitlab personal access token/token')\""
    echo "export TF_HTTP_USERNAME=\"$(op read 'op://private/gitlab personal access token/username')\""
    echo "export TF_VAR_gitlab_token=\"$(op read 'op://gss/GitLab_tf-eks/credential')\""
    echo "export CI_REGISTRY_USER=\"$(op read 'op://Amazon Web Services/JFrog_gitlabci/username')\""
    echo "export CI_REGISTRY_PASSWORD=\"$(op read 'op://Amazon Web Services/JFrog_gitlabci/credential')\""
    echo "export GI_RENOVATE_TOKEN=\"$(op read 'op://gss/GitLab_gi-renovate/credential')\""
    echo "export RENOVATE_TOKEN=\"$(op read 'op://gss/GitLab_renovate-runner-ci/credential')\""
    echo "export DOCKER_HUB_PASSWORD=\"$(op read 'op://gss/DockerHub_token/credential')\""
    #echo "export GITHUB_TOKEN=\"$(op read 'op://gss/GitHub_gitops-token/token')\""
    echo "export GITHUB_TOKEN=\"$(op read 'op://private/GH_TOKEN/token' --account my)\""
    echo "export OPENAI_API_KEY=\"$(op read 'op://private/OpenAI/credential')\""
  } > "$secrets_file"

  echo "Secrets have been updated in $secrets_file"
}

# Determine the target file of the symlink
secrets_target=$(readlink ~/.secrets || echo ~/.secrets)

# Check if the target exists and its modification time
if [ ! -e "$secrets_target" ] || [ -n "$(find "$secrets_target" -mtime +7 2>/dev/null)" ]; then
  update_secrets
fi

source ~/.secrets
